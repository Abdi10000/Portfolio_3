DROP TABLE IF EXISTS Course;
DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS Grade;

CREATE TABLE IF NOT EXISTS Course(
 CourseID   TEXT NOT NULL PRIMARY KEY,
 CourseName TEXT,
 Teacher    TEXT,
 Semester   TEXT,
 Year       INTEGER
);


CREATE TABLE IF NOT EXISTS Student(
 StudentID   Text NOT NULL PRIMARY KEY,
 StudentName TEXT,
 City        TEXT,
 PostCode    INTEGER,
 Country     TEXT
);


CREATE TABLE IF NOT EXISTS Grade
(
 SID   TEXT REFERENCES Student ON UPDATE CASCADE ON DELETE RESTRICT,
 CID   TEXT REFERENCES Course ON UPDATE CASCADE ON DELETE RESTRICT ,
 Grade INTEGER,
 PRIMARY KEY (SID, CID, Grade),
 FOREIGN KEY (SID) REFERENCES Student(StudentID) ON DELETE RESTRICT ON UPDATE CASCADE,
 FOREIGN KEY (CID) REFERENCES  Course(CourseID) ON DELETE RESTRICT ON UPDATE CASCADE
);


INSERT INTO Student(StudentID, StudentName, City, PostCode, Country) VALUES ('AILI', 'Aisha Lincoln', 'Nykøbing F', 4800, 'Denmark'),
                                                                            ('ANNI', 'Anya Nielsen', 'Nykøbing F', 4800,  'Denmark'),
                                                                            ('ALJE', 'Alfred Jensen','Karlskrona', null,   'Sweden'),
                                                                            ('BEBE', 'Berta Bertelsen', 'Billund', 7190,  'Denmark'),
                                                                            ('ALAN', 'Albert Antonsen', 'Sorø', 4180,     'Denmark'),
                                                                            ('ESER', 'Eske Eriksen', 'Eskildstrup', 4863, 'Denmark'),
                                                                            ('OLOL', 'Olaf Olesen',  'Odense',    5000,   'Denmark'),
                                                                            ('SASI', 'Salma Simonsen', 'Stockholm', null,  'Sweden'),
                                                                            ('THTH', 'Theis Thomasen', 'Tølløse',  4340,  'Denmark'),
                                                                            ('JAJE', 'Janet Jensen', 'Jyllinge',  4040,   'Denmark');



INSERT INTO Course(CourseID, CourseName, Teacher, Semester, Year) VALUES ('SD-A2019', 'Software Development', 'Line R', 'Autumn', 2019),
                                                                         ('SD-S2020', 'Software Development', 'Line R', 'Spring', 2020),
                                                                         ('ES1-A2019', 'Essential Computing 1', 'Ebbe', 'Autumn', 2019);



INSERT INTO Grade(SID, CID, Grade)VALUES ('AILI', 'SD-A2019',  12),
                                         ('AILI', 'ES1-A2019', 10),
                                         ('ANNI', 'SD-S2020',null),
                                         ('ANNI', 'ES1-A2019', 12),
                                         ('ALJE', 'SD-A2019',   7),
                                         ('ALJE', 'ES1-A2019', 10),
                                         ('BEBE', 'SD-S2020',null),
                                         ('BEBE', 'ES1-A2019',  2),
                                         ('ALAN', 'SD-A2019',  10),
                                         ('ALAN', 'ES1-A2019',  7),
                                         ('ESER', 'SD-S2020',null),
                                         ('ESER', 'ES1-A2019', 10),
                                         ('OLOL', 'SD-A2019',   4),
                                         ('OLOL', 'ES1-A2019', 12),
                                         ('SASI', 'SD-S2020',null),
                                         ('SASI', 'ES1-A2019', 12),
                                         ('THTH', 'SD-A2019',  12),
                                         ('THTH', 'ES1-A2019', 12),
                                         ('JAJE', 'SD-S2020',null),
                                         ('JAJE', 'ES1-A2019',  7);


-- This code shows all data provided from the assignment 
SELECT Student.StudentID, Grade.Grade, Student.StudentName, Course.CourseID, Course.CourseName, Course.Semester, Course.Year, Course.Teacher
FROM Student LEFT JOIN Grade ON Student.StudentID= Grade.SID
LEFT JOIN Course ON Grade.CID = Course.CourseID
GROUP BY Student.StudentID, Course.CourseName;


--Average Grade from Grade Table 
SELECT AVG(Grade)
FROM Grade;


-- The average grade of every student from the overall classes 
SELECT Student.StudentID, AVG(Grade.Grade) AS avgGrade
FROM Student LEFT JOIN Grade ON Student.StudentID= Grade.SID
GROUP BY Student.StudentID;


-- The average grade of individual classes 
SELECT Course.CourseID, AVG(Grade.Grade) AS avgClassGrade
FROM Course LEFT JOIN Grade ON Course.CourseID = Grade.CID
GROUP BY Course.CourseID;


--- Retrieves Courses taken and grade for selected student 
SELECT S1.StudentName, G1.SID, G1.Grade
FROM Student AS S1 JOIN Grade AS G1 ON S1.StudentID = G1.SID
WHERE SID = ?;



-- This code shows student name, courses and grades 
SELECT G1.SID, S1.StudentName, C1.CourseName, G1.CID, G1.Grade
FROM Course AS C1 JOIN Grade AS G1 ON C1.CourseID = G1.CID
LEFT JOIN Student AS S1 ON G1.SID = S1.StudentID
WHERE G1.SID = ?;


-- This part has two conditions for searching student name, course and grade
SELECT G1.SID, S1.StudentName, C1.CourseName, G1.CID, G1.Grade
FROM Course AS C1 JOIN Grade AS G1 ON C1.CourseID = G1.CID
LEFT JOIN Student AS S1 ON G1.SID = S1.StudentID
WHERE G1.SID = ? AND G1.CID = ?;



--This code shows how many students attend a specific course
SELECT Student.StudentID, Grade.Grade, Student.StudentName, Course.CourseID, Course.CourseName, Course.Semester, Course.Year, Course.Teacher
FROM Student LEFT JOIN Grade ON Student.StudentID= Grade.SID
LEFT JOIN Course ON Grade.CID = Course.CourseID
WHERE Course.CourseID = ?;


-- Average grade for selected student ID 
SELECT S1.StudentName, avg(G1.Grade)
FROM Student AS S1 JOIN Grade AS G1 ON G1.SID = S1.StudentID
WHERE G1.SID = ?;

--Average grade for selected course ID
SELECT  C1.CourseName, avg(G1.Grade)
FROM Course AS C1 JOIN Grade AS G1 ON C1.CourseID = G1.CID
WHERE G1.CID = ?;


-- Used to update the student grade if they value is null
UPDATE Grade
SET Grade = ? WHERE SID = ? AND CID = ? AND Grade IS NULL;

-- Used to update the student grade. In our case we return the value back to null
UPDATE Grade
SET Grade = ? WHERE SID = ? AND CID = ?;

-- This part shows course which have not given grade yet 
SELECT DISTINCT C1.CourseID, C1.CourseName, C1.Teacher, C1.Semester, C1.Year
FROM Course AS C1
JOIN Grade AS G1 ON C1.CourseID = G1.CID
WHERE Grade IS NULL;

-- This part are students which have not partaken SD-S2020
SELECT S1.StudentID, S1.StudentName, G1.Grade
FROM Student S1
JOIN Grade AS G1 ON S1.StudentID = G1.SID
WHERE Grade IS NULL;
